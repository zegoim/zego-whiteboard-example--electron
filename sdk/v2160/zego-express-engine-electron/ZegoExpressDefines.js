
/**
 * Application scenario.
 * @enum {number}
 */
const ZegoScenario =
{
    /** 
     * @description General scenario
     */
    General: 0,
    /** 
     * @description Communication scenario
     */
    Communication: 1,
    /** 
     * @description Live scenario
     */
    Live: 2,
}

/**
 * Language.
 * @enum {number}
 */
const ZegoLanguage =
{
    /** 
     * @description English
     */
    English: 0,
    /** 
     * @description Chinese
     */
    Chinese: 1,
}

/**
 * Room mode.
 * @enum {number}
 */
const ZegoRoomMode =
{
    /** 
     * @description Single room mode.
     */
    SingleRoom: 0,
    /** 
     * @description Multiple room mode.
     */
    MultiRoom: 1,
}

/**
 * engine state.
 * @enum {number}
 */
const ZegoEngineState =
{
    /** 
     * @description The engine has started
     */
    Start: 0,
    /** 
     * @description The engine has stoped
     */
    Stop: 1,
}

/**
 * Room state.
 * @enum {number}
 */
const ZegoRoomState =
{
    /** 
     * @description Unconnected state, enter this state before logging in and after exiting the room. If there is a steady state abnormality in the process of logging in to the room, such as AppID or Token are incorrect, or if the same user name is logged in elsewhere and the local end is KickOut, it will enter this state.
     */
    Disconnected: 0,
    /** 
     * @description The state that the connection is being requested. It will enter this state after successful execution login room function. The display of the UI is usually performed using this state. If the connection is interrupted due to poor network quality, the SDK will perform an internal retry and will return to the requesting connection status.
     */
    Connecting: 1,
    /** 
     * @description The status that is successfully connected. Entering this status indicates that the login to the room has been successful. The user can receive the callback notification of the user and the stream information in the room.
     */
    Connected: 2,
}

/**
 * Publish channel.
 * @enum {number}
 */
const ZegoPublishChannel =
{
    /** 
     * @description The main (default/first) publish channel.
     */
    Main: 0,
    /** 
     * @description The auxiliary (second) publish channel
     */
    Aux: 1,
    /** 
     * @description The third publish channel
     */
    Third: 2,
    /** 
     * @description The fourth publish channel
     */
    Fourth: 3,
}

/**
 * Video rendering fill mode.
 * @enum {number}
 */
const ZegoViewMode =
{
    /** 
     * @description The proportional scaling up, there may be black borders
     */
    AspectFit: 0,
    /** 
     * @description The proportional zoom fills the entire View and may be partially cut
     */
    AspectFill: 1,
    /** 
     * @description Fill the entire view, the image may be stretched
     */
    ScaleToFill: 2,
}

/**
 * Mirror mode for previewing or playing the of the stream.
 * @enum {number}
 */
const ZegoVideoMirrorMode =
{
    /** 
     * @description The mirror image only for previewing locally. This mode is used by default.
     */
    OnlyPreviewMirror: 0,
    /** 
     * @description Both the video previewed locally and the far end playing the stream will see mirror image.
     */
    BothMirror: 1,
    /** 
     * @description Both the video previewed locally and the far end playing the stream will not see mirror image.
     */
    NoMirror: 2,
    /** 
     * @description The mirror image only for far end playing the stream.
     */
    OnlyPublishMirror: 3,
}

/**
 * SEI type
 * @enum {number}
 */
const ZegoSEIType =
{
    /** 
     * @description Using H.264 SEI (nalu type = 6, payload type = 243) type packaging, this type is not specified by the SEI standard, there is no conflict with the video encoder or the SEI in the video file, users do not need to follow the SEI content Do filtering, SDK uses this type by default.
     */
    ZegoDefined: 0,
    /** 
     * @description SEI (nalu type = 6, payload type = 5) of H.264 is used for packaging. The H.264 standard has a prescribed format for this type: startcode + nalu type (6) + payload type (5) + len + payload (uuid + content) + trailing bits. Because the video encoder itself generates an SEI with a payload type of 5, or when a video file is used for streaming, such SEI may also exist in the video file, so when using this type, the user needs to use uuid + context as a buffer sending SEI. At this time, in order to distinguish the SEI generated by the video encoder itself, when the App sends this type of SEI, it can fill in the service-specific uuid (uuid length is 16 bytes). When the receiver uses the SDK to parse the SEI of the payload type 5, it will set filter string filters out the SEI matching the uuid and throws it to the business. If the filter string is not set, the SDK will throw all received SEI to the developer. uuid filter string setting function, [ZegoEngineConfig.advancedConfig("unregister_sei_filter","XXXXXX")], where unregister_sei_filter is the key, and XXXXX is the uuid filter string to be set.
     */
    UserUnregister: 1,
}

/**
 * Publish stream status.
 * @enum {number}
 */
const ZegoPublisherState =
{
    /** 
     * @description The state is not published, and it is in this state before publishing the stream. If a steady-state exception occurs in the publish process, such as AppID or Token are incorrect, or if other users are already publishing the stream, there will be a failure and enter this state.
     */
    NoPublish: 0,
    /** 
     * @description The state that it is requesting to publish the stream after the [startPublishingStream] function is successfully called. The UI is usually displayed through this state. If the connection is interrupted due to poor network quality, the SDK will perform an internal retry and will return to the requesting state.
     */
    PublishRequesting: 1,
    /** 
     * @description The state that the stream is being published, entering the state indicates that the stream has been successfully published, and the user can communicate normally.
     */
    Publishing: 2,
}

/**
 * Voice changer preset value.
 * @enum {number}
 */
const ZegoVoiceChangerPreset =
{
    /** 
     * @description No Voice changer
     */
    None: 0,
    /** 
     * @description Male to child voice (loli voice effect)
     */
    MenToChild: 1,
    /** 
     * @description Male to female voice (kindergarten voice effect)
     */
    MenToWomen: 2,
    /** 
     * @description Female to child voice
     */
    WomenToChild: 3,
    /** 
     * @description Female to male voice
     */
    WomenToMen: 4,
    /** 
     * @description Foreigner voice effect
     */
    Foreigner: 5,
    /** 
     * @description Autobot Optimus Prime voice effect
     */
    OptimusPrime: 6,
    /** 
     * @description Android robot voice effect
     */
    Android: 7,
    /** 
     * @description Ethereal voice effect
     */
    Ethereal: 8,
    /** 
     * @description Magnetic(Male) voice effect
     */
    MaleMagnetic: 9,
    /** 
     * @description Fresh(Female) voice effect
     */
    FemaleFresh: 10,
    /** 
     * @description Electronic effects in C major voice effect
     */
    MajorC: 11,
    /** 
     * @description Electronic effects in A minor voice effect
     */
    MinorA: 12,
    /** 
     * @description Electronic effects in harmonic minor voice effect
     */
    HarmonicMinor: 13,
}

/**
 * Reverberation preset value.
 * @enum {number}
 */
const ZegoReverbPreset =
{
    /** 
     * @description No Reverberation
     */
    None: 0,
    /** 
     * @description Soft room reverb effect
     */
    SoftRoom: 1,
    /** 
     * @description Large room reverb effect
     */
    LargeRoom: 2,
    /** 
     * @description Concert hall reverb effect
     */
    ConcertHall: 3,
    /** 
     * @description Valley reverb effect
     */
    Valley: 4,
    /** 
     * @description Recording studio reverb effect
     */
    RecordingStudio: 5,
    /** 
     * @description Basement reverb effect
     */
    Basement: 6,
    /** 
     * @description KTV reverb effect
     */
    KTV: 7,
    /** 
     * @description Popular reverb effect
     */
    Popular: 8,
    /** 
     * @description Rock reverb effect
     */
    Rock: 9,
    /** 
     * @description Vocal concert reverb effect
     */
    VocalConcert: 10,
    /** 
     * @description Gramophone reverb effect
     */
    GramoPhone: 11,
}

/**
 * Video configuration resolution and bitrate preset enumeration. The preset resolutions are adapted for mobile and desktop. On mobile, height is longer than width, and desktop is the opposite. For example, 1080p is actually 1080(w) x 1920(h) on mobile and 1920(w) x 1080(h) on desktop.
 * @enum {number}
 */
const ZegoVideoConfigPreset =
{
    /** 
     * @description Set the resolution to 320x180, the default is 15 fps, the code rate is 300 kbps
     */
    Preset180P: 0,
    /** 
     * @description Set the resolution to 480x270, the default is 15 fps, the code rate is 400 kbps
     */
    Preset270P: 1,
    /** 
     * @description Set the resolution to 640x360, the default is 15 fps, the code rate is 600 kbps
     */
    Preset360P: 2,
    /** 
     * @description Set the resolution to 960x540, the default is 15 fps, the code rate is 1200 kbps
     */
    Preset540P: 3,
    /** 
     * @description Set the resolution to 1280x720, the default is 15 fps, the code rate is 1500 kbps
     */
    Preset720P: 4,
    /** 
     * @description Set the resolution to 1920x1080, the default is 15 fps, the code rate is 3000 kbps
     */
    Preset1080P: 5,
}

/**
 * Stream quality level.
 * @enum {number}
 */
const ZegoStreamQualityLevel =
{
    /** 
     * @description Excellent
     */
    Excellent: 0,
    /** 
     * @description Good
     */
    Good: 1,
    /** 
     * @description Normal
     */
    Medium: 2,
    /** 
     * @description Bad
     */
    Bad: 3,
    /** 
     * @description Failed
     */
    Die: 4,
    /** 
     * @description Unknown
     */
    Unknown: 5,
}

/**
 * Audio channel type.
 * @enum {number}
 */
const ZegoAudioChannel =
{
    /** 
     * @description Unknown
     */
    Unknown: 0,
    /** 
     * @description Mono
     */
    Mono: 1,
    /** 
     * @description Stereo
     */
    Stereo: 2,
}

/**
 * Custom audio process configure type.
 * @enum {number}
 */
const ZegoCustomAudioProcessConfigureType =
{
    /** 
     * @description Before ear return.
     */
    ZegoAudioBeforeEarReturn: 0,
    /** 
     * @description After ear return.
     */
    ZegoAudioAfterEarReturn: 1,
}

/**
 * Audio capture stereo mode.
 * @enum {number}
 */
const ZegoAudioCaptureStereoMode =
{
    /** 
     * @description Disable stereo capture, that is, mono.
     */
    None: 0,
    /** 
     * @description Always enable stereo capture.
     */
    Always: 1,
    /** 
     * @description [This mode is deprecated] Same as 'Always', that is, always enable stereo capture.
     */
    Adaptive: 2,
}

/**
 * Audio Codec ID.
 * @enum {number}
 */
const ZegoAudioCodecID =
{
    /** 
     * @description default
     */
    Default: 0,
    /** 
     * @description Normal
     */
    Normal: 1,
    /** 
     * @description Normal2
     */
    Normal2: 2,
    /** 
     * @description Normal3
     */
    Normal3: 3,
    /** 
     * @description Low
     */
    Low: 4,
    /** 
     * @description Low2
     */
    Low2: 5,
    /** 
     * @description Low3
     */
    Low3: 6,
}

/**
 * Video codec ID.
 * @enum {number}
 */
const ZegoVideoCodecID =
{
    /** 
     * @description Default (H.264)
     */
    Default: 0,
    /** 
     * @description Scalable Video Coding (H.264 SVC)
     */
    SVC: 1,
    /** 
     * @description VP8
     */
    VP8: 2,
    /** 
     * @description H.265
     */
    H265: 3,
    /** 
     * @description Unknown Video Coding
     */
    Unknown: 100,
}

/**
 * Player video layer.
 * @enum {number}
 */
const ZegoPlayerVideoLayer =
{
    /** 
     * @description The layer to be played depends on the network status
     */
    Auto: 0,
    /** 
     * @description Play the base layer (small resolution)
     */
    Base: 1,
    /** 
     * @description Play the extend layer (big resolution)
     */
    BaseExtend: 2,
}

/**
 * Video stream type
 * @enum {number}
 */
const ZegoVideoStreamType =
{
    /** 
     * @description The type to be played depends on the network status
     */
    Default: 0,
    /** 
     * @description small resolution type
     */
    Small: 1,
    /** 
     * @description big resolution type
     */
    Big: 2,
}

/**
 * Audio echo cancellation mode.
 * @enum {number}
 */
const ZegoAECMode =
{
    /** 
     * @description Aggressive echo cancellation may affect the sound quality slightly, but the echo will be very clean.
     */
    Aggressive: 0,
    /** 
     * @description Moderate echo cancellation, which may slightly affect a little bit of sound, but the residual echo will be less.
     */
    Medium: 1,
    /** 
     * @description Comfortable echo cancellation, that is, echo cancellation does not affect the sound quality of the sound, and sometimes there may be a little echo, but it will not affect the normal listening.
     */
    Soft: 2,
}

/**
 * Active Noise Suppression mode.
 * @enum {number}
 */
const ZegoANSMode =
{
    /** 
     * @description Soft ANS. In most instances, the sound quality will not be damaged, but some noise will remain.
     */
    Soft: 0,
    /** 
     * @description Medium ANS. It may damage some sound quality, but it has a good noise reduction effect.
     */
    Medium: 1,
    /** 
     * @description Aggressive ANS. It may significantly impair the sound quality, but it has a good noise reduction effect.
     */
    Aggressive: 2,
    /** 
     * @description AI mode ANS. It will cause great damage to music, so it can not be used for noise suppression of sound sources that need to collect background sound. Please contact ZEGO technical support before use.
     */
    AI: 3,
}

/**
 * video encode profile.
 * @enum {number}
 */
const ZegoEncodeProfile =
{
    /** 
     * @description The default video encode specifications, The default value is the video encoding specification at the Main level.
     */
    Default: 0,
    /** 
     * @description Baseline-level video encode specifications have low decoding consumption and poor picture effects. They are generally used for low-level applications or applications that require additional fault tolerance.
     */
    Baseline: 1,
    /** 
     * @description Main-level video encode specifications, decoding consumption is slightly higher than Baseline, the picture effect is also better, generally used in mainstream consumer electronic products.
     */
    Main: 2,
    /** 
     * @description High-level video encode specifications, decoding consumption is higher than Main, the picture effect is better, generally used for broadcasting and video disc storage, high-definition TV.
     */
    High: 3,
}

/**
 * Traffic control property (bitmask enumeration).
 * @enum {number}
 */
const ZegoTrafficControlProperty =
{
    /** 
     * @description Basic (Adaptive (reduce) video bitrate)
     */
    Basic: 0,
    /** 
     * @description Adaptive (reduce) video FPS
     */
    AdaptiveFPS: 1,
    /** 
     * @description Adaptive (reduce) video resolution
     */
    AdaptiveResolution: 1 << 1,
    /** 
     * @description Adaptive (reduce) audio bitrate
     */
    AdaptiveAudioBitrate: 1 << 2,
}

/**
 * Video transmission mode when current bitrate is lower than the set minimum bitrate.
 * @enum {number}
 */
const ZegoTrafficControlMinVideoBitrateMode =
{
    /** 
     * @description Stop video transmission when current bitrate is lower than the set minimum bitrate
     */
    NoVideo: 0,
    /** 
     * @description Video is sent at a very low frequency (no more than 2fps) which is lower than the set minimum bitrate
     */
    UltraLowFPS: 1,
}

/**
 * Factors that trigger traffic control
 * @enum {number}
 */
const ZegoTrafficControlFocusOnMode =
{
    /** 
     * @description Focus only on the local network
     */
    ZegoTrafficControlFounsOnLocalOnly: 0,
    /** 
     * @description Pay attention to the local network, but also take into account the remote network, currently only effective in the 1v1 scenario
     */
    ZegoTrafficControlFounsOnRemote: 1,
}

/**
 * Playing stream status.
 * @enum {number}
 */
const ZegoPlayerState =
{
    /** 
     * @description The state of the flow is not played, and it is in this state before the stream is played. If the steady flow anomaly occurs during the playing process, such as AppID or Token are incorrect, it will enter this state.
     */
    NoPlay: 0,
    /** 
     * @description The state that the stream is being requested for playing. After the [startPlayingStream] function is successfully called, it will enter the state. The UI is usually displayed through this state. If the connection is interrupted due to poor network quality, the SDK will perform an internal retry and will return to the requesting state.
     */
    PlayRequesting: 1,
    /** 
     * @description The state that the stream is being playing, entering the state indicates that the stream has been successfully played, and the user can communicate normally.
     */
    Playing: 2,
}

/**
 * Media event when playing.
 * @enum {number}
 */
const ZegoPlayerMediaEvent =
{
    /** 
     * @description Audio stuck event when playing
     */
    AudioBreakOccur: 0,
    /** 
     * @description Audio stuck event recovery when playing
     */
    AudioBreakResume: 1,
    /** 
     * @description Video stuck event when playing
     */
    VideoBreakOccur: 2,
    /** 
     * @description Video stuck event recovery when playing
     */
    VideoBreakResume: 3,
}

/**
 * Stream Resource Mode
 * @enum {number}
 */
const ZegoStreamResourceMode =
{
    /** 
     * @description Default mode. The SDK will automatically select the streaming resource according to the cdnConfig parameters set by the player config and the ready-made background configuration.
     */
    Default: 0,
    /** 
     * @description Playing stream only from CDN.
     */
    OnlyCDN: 1,
    /** 
     * @description Playing stream only from L3.
     */
    OnlyL3: 2,
    /** 
     * @description Playing stream only from RTC.
     */
    OnlyRTC: 3,
}

/**
 * Update type.
 * @enum {number}
 */
const ZegoUpdateType =
{
    /** 
     * @description Add
     */
    Add: 0,
    /** 
     * @description Delete
     */
    Delete: 1,
}

/**
 * State of CDN relay.
 * @enum {number}
 */
const ZegoStreamRelayCDNState =
{
    /** 
     * @description The state indicates that there is no CDN relay
     */
    NoRelay: 0,
    /** 
     * @description The CDN relay is being requested
     */
    RelayRequesting: 1,
    /** 
     * @description Entering this status indicates that the CDN relay has been successful
     */
    Relaying: 2,
}

/**
 * Reason for state of CDN relay changed.
 * @enum {number}
 */
const ZegoStreamRelayCDNUpdateReason =
{
    /** 
     * @description No error
     */
    None: 0,
    /** 
     * @description Server error
     */
    ServerError: 1,
    /** 
     * @description Handshake error
     */
    HandshakeFailed: 2,
    /** 
     * @description Access point error
     */
    AccessPointError: 3,
    /** 
     * @description Stream create failure
     */
    CreateStreamFailed: 4,
    /** 
     * @description Bad stream ID
     */
    BadName: 5,
    /** 
     * @description CDN server actively disconnected
     */
    CDNServerDisconnected: 6,
    /** 
     * @description Active disconnect
     */
    Disconnected: 7,
    /** 
     * @description All mixer input streams sessions closed
     */
    MixStreamAllInputStreamClosed: 8,
    /** 
     * @description All mixer input streams have no data
     */
    MixStreamAllInputStreamNoData: 9,
    /** 
     * @description Internal error of stream mixer server
     */
    MixStreamServerInternalError: 10,
}

/**
 * Device type.
 * @enum {number}
 */
const ZegoDeviceType =
{
    /** 
     * @description Unknown device type.
     */
    Unknown: 0,
    /** 
     * @description Camera device.
     */
    Camera: 1,
    /** 
     * @description Microphone device.
     */
    Microphone: 2,
    /** 
     * @description Speaker device.
     */
    Speaker: 3,
    /** 
     * @description Audio device. (Other audio device that cannot be accurately classified into microphones or speakers.)
     */
    AudioDevice: 4,
}

/**
 * The exception type for the device.
 * @enum {number}
 */
const ZegoDeviceExceptionType =
{
    /** 
     * @description Unknown device exception.
     */
    Unknown: 0,
    /** 
     * @description Generic device exception.
     */
    Generic: 1,
    /** 
     * @description Invalid device ID exception.
     */
    InvalidId: 2,
    /** 
     * @description Device permission is not granted.
     */
    PermissionNotGranted: 3,
    /** 
     * @description The capture frame rate of the device is 0.
     */
    ZeroCaptureFps: 4,
    /** 
     * @description The device is being occupied.
     */
    DeviceOccupied: 5,
    /** 
     * @description The device is unplugged (not plugged in).
     */
    DeviceUnplugged: 6,
    /** 
     * @description The device requires the system to restart before it can work (Windows platform only).
     */
    RebootRequired: 7,
    /** 
     * @description The system media service is unavailable, e.g. when the iOS system detects that the current pressure is huge (such as playing a lot of animation), it is possible to disable all media related services (Apple platform only).
     */
    MediaServicesWereLost: 8,
    /** 
     * @description The device is being occupied by Siri (Apple platform only).
     */
    SiriIsRecording: 9,
    /** 
     * @description The device captured sound level is too low (Windows platform only).
     */
    SoundLevelTooLow: 10,
    /** 
     * @description The device is being occupied, and maybe cause by iPad magnetic case (Apple platform only).
     */
    MagneticCase: 11,
}

/**
 * Remote device status.
 * @enum {number}
 */
const ZegoRemoteDeviceState =
{
    /** 
     * @description Device on
     */
    Open: 0,
    /** 
     * @description General device error
     */
    GenericError: 1,
    /** 
     * @description Invalid device ID
     */
    InvalidID: 2,
    /** 
     * @description No permission
     */
    NoAuthorization: 3,
    /** 
     * @description Captured frame rate is 0
     */
    ZeroFPS: 4,
    /** 
     * @description The device is occupied
     */
    InUseByOther: 5,
    /** 
     * @description The device is not plugged in or unplugged
     */
    Unplugged: 6,
    /** 
     * @description The system needs to be restarted
     */
    RebootRequired: 7,
    /** 
     * @description System media services stop, such as under the iOS platform, when the system detects that the current pressure is huge (such as playing a lot of animation), it is possible to disable all media related services.
     */
    SystemMediaServicesLost: 8,
    /** 
     * @description Capturing disabled
     */
    Disable: 9,
    /** 
     * @description The remote device is muted
     */
    Mute: 10,
    /** 
     * @description The device is interrupted, such as a phone call interruption, etc.
     */
    Interruption: 11,
    /** 
     * @description There are multiple apps at the same time in the foreground, such as the iPad app split screen, the system will prohibit all apps from using the camera.
     */
    InBackground: 12,
    /** 
     * @description CDN server actively disconnected
     */
    MultiForegroundApp: 13,
    /** 
     * @description The system is under high load pressure and may cause abnormal equipment.
     */
    BySystemPressure: 14,
    /** 
     * @description The remote device is not supported to publish the device state.
     */
    NotSupport: 15,
}

/**
 * Audio device type.
 * @enum {number}
 */
const ZegoAudioDeviceType =
{
    /** 
     * @description Audio input type
     */
    Input: 0,
    /** 
     * @description Audio output type
     */
    Output: 1,
}

/**
 * Audio route
 * @enum {number}
 */
const ZegoAudioRoute =
{
    /** 
     * @description Speaker
     */
    Speaker: 0,
    /** 
     * @description Headphone
     */
    Headphone: 1,
    /** 
     * @description Bluetooth device
     */
    Bluetooth: 2,
    /** 
     * @description Receiver
     */
    Receiver: 3,
    /** 
     * @description External USB audio device
     */
    ExternalUSB: 4,
    /** 
     * @description Apple AirPlay
     */
    AirPlay: 5,
}

/**
 * Mix stream content type.
 * @enum {number}
 */
const ZegoMixerInputContentType =
{
    /** 
     * @description Mix stream for audio only
     */
    Audio: 0,
    /** 
     * @description Mix stream for both audio and video
     */
    Video: 1,
    /** 
     * @description Mix stream for video only
     */
    VideoOnly: 2,
}

/**
 * Capture pipeline scale mode.
 * @enum {number}
 */
const ZegoCapturePipelineScaleMode =
{
    /** 
     * @description Zoom immediately after acquisition, default
     */
    Pre: 0,
    /** 
     * @description Scaling while encoding
     */
    Post: 1,
}

/**
 * Video frame format.
 * @enum {number}
 */
const ZegoVideoFrameFormat =
{
    /** 
     * @description Unknown format, will take platform default
     */
    Unknown: 0,
    /** 
     * @description I420 (YUV420Planar) format
     */
    I420: 1,
    /** 
     * @description NV12 (YUV420SemiPlanar) format
     */
    NV12: 2,
    /** 
     * @description NV21 (YUV420SemiPlanar) format
     */
    NV21: 3,
    /** 
     * @description BGRA32 format
     */
    BGRA32: 4,
    /** 
     * @description RGBA32 format
     */
    RGBA32: 5,
    /** 
     * @description ARGB32 format
     */
    ARGB32: 6,
    /** 
     * @description ABGR32 format
     */
    ABGR32: 7,
    /** 
     * @description I422 (YUV422Planar) format
     */
    I422: 8,
}

/**
 * Video frame buffer type.
 * @enum {number}
 */
const ZegoVideoBufferType =
{
    /** 
     * @description Raw data type video frame
     */
    Unknown: 0,
    /** 
     * @description Raw data type video frame
     */
    RawData: 1,
    /** 
     * @description Encoded data type video frame
     */
    EncodedData: 2,
    /** 
     * @description Texture 2D type video frame
     */
    GLTexture2D: 3,
    /** 
     * @description CVPixelBuffer type video frame
     */
    CVPixelBuffer: 4,
    /** 
     * @description Surface Texture type video frame
     */
    SurfaceTexture: 5,
    /** 
     * @description GL_TEXTURE_EXTERNAL_OES type video frame
     */
    GLTextureExternalOES: 6,
}

/**
 * Video frame format series.
 * @enum {number}
 */
const ZegoVideoFrameFormatSeries =
{
    /** 
     * @description RGB series
     */
    RGB: 0,
    /** 
     * @description YUV series
     */
    YUV: 1,
}

/**
 * Video frame flip mode.
 * @enum {number}
 */
const ZegoVideoFlipMode =
{
    /** 
     * @description No flip
     */
    None: 0,
    /** 
     * @description X-axis flip
     */
    X: 1,
    /** 
     * @description Y-axis flip
     */
    Y: 2,
    /** 
     * @description X-Y-axis flip
     */
    XY: 3,
}

/**
 * Audio Config Preset.
 * @enum {number}
 */
const ZegoAudioConfigPreset =
{
    /** 
     * @description Basic sound quality (16 kbps, Mono, ZegoAudioCodecIDDefault)
     */
    BasicQuality: 0,
    /** 
     * @description Standard sound quality (48 kbps, Mono, ZegoAudioCodecIDDefault)
     */
    StandardQuality: 1,
    /** 
     * @description Standard sound quality (56 kbps, Stereo, ZegoAudioCodecIDDefault)
     */
    StandardQualityStereo: 2,
    /** 
     * @description High sound quality (128 kbps, Mono, ZegoAudioCodecIDDefault)
     */
    HighQuality: 3,
    /** 
     * @description High sound quality (192 kbps, Stereo, ZegoAudioCodecIDDefault)
     */
    HighQualityStereo: 4,
}

/**
 * Player state.
 * @enum {number}
 */
const ZegoMediaPlayerState =
{
    /** 
     * @description Not playing
     */
    NoPlay: 0,
    /** 
     * @description Playing
     */
    Playing: 1,
    /** 
     * @description Pausing
     */
    Pausing: 2,
    /** 
     * @description End of play
     */
    PlayEnded: 3,
}

/**
 * Player network event.
 * @enum {number}
 */
const ZegoMediaPlayerNetworkEvent =
{
    /** 
     * @description Network resources are not playing well, and start trying to cache data
     */
    BufferBegin: 0,
    /** 
     * @description Network resources can be played smoothly
     */
    BufferEnded: 1,
}

/**
 * Audio channel.
 * @enum {number}
 */
const ZegoMediaPlayerAudioChannel =
{
    /** 
     * @description Audio channel left
     */
    Left: 0,
    /** 
     * @description Audio channel right
     */
    Right: 1,
    /** 
     * @description Audio channel all
     */
    All: 2,
}

/**
 * AudioEffectPlayer state.
 * @enum {number}
 */
const ZegoAudioEffectPlayState =
{
    /** 
     * @description Not playing
     */
    NoPlay: 0,
    /** 
     * @description Playing
     */
    Playing: 1,
    /** 
     * @description Pausing
     */
    Pausing: 2,
    /** 
     * @description End of play
     */
    PlayEnded: 3,
}

/**
 * audio sample rate.
 * @enum {number}
 */
const ZegoAudioSampleRate =
{
    /** 
     * @description Unknown
     */
    Unknown: 0,
    /** 
     * @description 8K
     */
    ZegoAudioSampleRate8K: 8000,
    /** 
     * @description 16K
     */
    ZegoAudioSampleRate16K: 16000,
    /** 
     * @description 22.05K
     */
    ZegoAudioSampleRate22K: 22050,
    /** 
     * @description 24K
     */
    ZegoAudioSampleRate24K: 24000,
    /** 
     * @description 32K
     */
    ZegoAudioSampleRate32K: 32000,
    /** 
     * @description 44.1K
     */
    ZegoAudioSampleRate44K: 44100,
    /** 
     * @description 48K
     */
    ZegoAudioSampleRate48K: 48000,
}

/**
 * Record type.
 * @enum {number}
 */
const ZegoDataRecordType =
{
    /** 
     * @description This field indicates that the Express-Audio SDK records audio by default, and the Express-Video SDK records audio and video by default. When recording files in .aac format, audio is also recorded by default.
     */
    Default: 0,
    /** 
     * @description only record audio
     */
    OnlyAudio: 1,
    /** 
     * @description only record video, Audio SDK and recording .aac format files are invalid.
     */
    OnlyVideo: 2,
    /** 
     * @description record audio and video. Express-Audio SDK and .aac format files are recorded only audio.
     */
    AudioAndVideo: 3,
}

/**
 * Record state.
 * @enum {number}
 */
const ZegoDataRecordState =
{
    /** 
     * @description Unrecorded state, which is the state when a recording error occurs or before recording starts.
     */
    NoRecord: 0,
    /** 
     * @description Recording in progress, in this state after successfully call [startRecordingCapturedData] function
     */
    Recording: 1,
    /** 
     * @description Record successs
     */
    Success: 2,
}

/**
 * Network mode
 * @enum {number}
 */
const ZegoNetworkMode =
{
    /** 
     * @description Offline (No network)
     */
    Offline: 0,
    /** 
     * @description Unknown network mode
     */
    Unknown: 1,
    /** 
     * @description Wired Ethernet (LAN)
     */
    Ethernet: 2,
    /** 
     * @description Wi-Fi (WLAN)
     */
    Wifi: 3,
    /** 
     * @description 2G Network (GPRS/EDGE/CDMA1x/etc.)
     */
    Mode2G: 4,
    /** 
     * @description 3G Network (WCDMA/HSDPA/EVDO/etc.)
     */
    Mode3G: 5,
    /** 
     * @description 4G Network (LTE)
     */
    Mode4G: 6,
    /** 
     * @description 5G Network (NR (NSA/SA))
     */
    Mode5G: 7,
}

/**
 * network speed test type
 * @enum {number}
 */
const ZegoNetworkSpeedTestType =
{
    /** 
     * @description uplink
     */
    Uplink: 0,
    /** 
     * @description downlink
     */
    Downlink: 1,
}

/**
 * Font type.
 * @enum {number}
 */
const ZegoFontType =
{
    /** 
     * @description Source han sans.
     */
    SourceHanSans: 0,
    /** 
     * @description Alibaba sans.
     */
    AlibabaSans: 1,
    /** 
     * @description Pang men zheng dao title.
     */
    PangMenZhengDaoTitle: 2,
    /** 
     * @description HappyZcool.
     */
    HappyZcool: 3,
}

/**
 * Mixing stream video view render mode.
 * @enum {number}
 */
const ZegoMixRenderMode =
{
    /** 
     * @description The proportional zoom fills the entire area and may be partially cut.
     */
    Fill: 0,
    /** 
     * @description Scale the filled area proportionally. If the scale does not match the set size after scaling, the extra part will be displayed as transparent.
     */
    Fit: 1,
}

/**
 * Camera focus mode.
 * @enum {number}
 */
const ZegoCameraFocusMode =
{
    /** 
     * @description Auto focus.
     */
    AutoFocus: 0,
    /** 
     * @description Continuous auto focus.
     */
    ContinuousAutoFocus: 1,
}

/**
 * Camera exposure mode.
 * @enum {number}
 */
const ZegoCameraExposureMode =
{
    /** 
     * @description Auto exposure.
     */
    AutoExposure: 0,
    /** 
     * @description Continuous auto exposure.
     */
    ContinuousAutoExposure: 1,
}

/**
 * voice activity detection type
 * @enum {number}
 */
const ZegoAudioVADType =
{
    /** 
     * @description noise
     */
    Noise: 0,
    /** 
     * @description speech
     */
    Speech: 1,
}

/**
 * stable voice activity detection type
 * @enum {number}
 */
const ZegoAudioVADStableStateMonitorType =
{
    /** 
     * @description captured
     */
    Captured: 0,
    /** 
     * @description custom processed
     */
    CustomProcessed: 1,
}

/**
 * @typedef {Object} ZegoLogConfig - Log config.
 * @property {string} logPath - The storage path of the log file. Description: Used to customize the storage path of the log file. Use cases: This configuration is required when you need to customize the log storage path. Required: False. Default value: The default path of each platform is different, please refer to the official website document https://docs.zegocloud.com/faq/express_sdkLog. Caution: Developers need to ensure read and write permissions for files under this path.
 * @property {number} logSize - Maximum log file size(Bytes). Description: Used to customize the maximum log file size. Use cases: This configuration is required when you need to customize the upper limit of the log file size. Required: False. Default value: 5MB (5 * 1024 * 1024 Bytes). Value range: Minimum 1MB (1 * 1024 * 1024 Bytes), maximum 100M (100 * 1024 * 1024 Bytes), 0 means no need to write logs. Caution: The larger the upper limit of the log file size, the more log information it carries, but the log upload time will be longer.
 */

/**
 * @typedef {Object} ZegoEngineProfile - Profile for create engine
 * @property {number} appID - Application ID issued by ZEGO for developers, please apply from the ZEGO Admin Console https://console.zegocloud.com The value ranges from 0 to 4294967295.
 * @property {string} appSign - Application signature for each AppID, please apply from the ZEGO Admin Console. Application signature is a 64 character string. Each character has a range of '0' ~ '9', 'a' ~ 'z'. AppSign 2.17.0 and later allows null or no transmission. If the token is passed empty or not passed, the token must be entered in the [ZegoRoomConfig] parameter for authentication when the [loginRoom] interface is called to login to the room.
 * @property {ZegoScenario} scenario - The application scenario. Developers can choose one of ZegoScenario based on the scenario of the app they are developing, and the engine will preset a more general setting for specific scenarios based on the set scenario. After setting specific scenarios, developers can still call specific functions to set specific parameters if they have customized parameter settings.
 */

/**
 * @typedef {Object} ZegoEngineConfig - Advanced engine configuration.
 * @property {?ZegoLogConfig} logConfig - Log configuration, if not set, use the default configuration. It must be set before calling [createEngine] to take effect. If it is set after [createEngine], it will take effect at the next [createEngine] after [destroyEngine].
 * @property {?map<string, string>} advancedConfig - Other special function switches, if not set, no special function will be used by default. Please contact ZEGO technical support before use.
 */

/**
 * @typedef {Object} ZegoRoomConfig - Advanced room configuration.
 * @property {number} maxMemberCount - The maximum number of users in the room, Passing 0 means unlimited, the default is unlimited.
 * @property {boolean} isUserStatusNotify - Whether to enable the user in and out of the room callback notification [onRoomUserUpdate], the default is off. If developers need to use ZEGO Room user notifications, make sure that each user who login sets this flag to true
 * @property {string} token - The token issued by the developer's business server is used to ensure security. For the generation rules, please refer to [Using Token Authentication](https://doc-zh.zego.im/article/10360), the default is an empty string, that is, no authentication. In versions 2.17.0 and above, if appSign is not passed in when calling the [createEngine] API to create an engine, or if appSign is empty, this parameter must be set for authentication when logging in to a room.
 */

/**
 * @typedef {Object} ZegoVideoConfig - Video config.
 * @property {number} captureWidth - Capture resolution width, control the width of camera image acquisition. SDK requires this member to be set to an even number. Only the camera is not started and the custom video capture is not used, the setting is effective. For performance reasons, the SDK scales the video frame to the encoding resolution after capturing from camera and before rendering to the preview view. Therefore, the resolution of the preview image is the encoding resolution. If you need the resolution of the preview image to be this value, Please call [setCapturePipelineScaleMode] first to change the capture pipeline scale mode to [Post]
 * @property {number} captureHeight - Capture resolution height, control the height of camera image acquisition. SDK requires this member to be set to an even number. Only the camera is not started and the custom video capture is not used, the setting is effective. For performance reasons, the SDK scales the video frame to the encoding resolution after capturing from camera and before rendering to the preview view. Therefore, the resolution of the preview image is the encoding resolution. If you need the resolution of the preview image to be this value, Please call [setCapturePipelineScaleMode] first to change the capture pipeline scale mode to [Post]
 * @property {number} encodeWidth - Encode resolution width, control the image width of the encoder when publishing stream. SDK requires this member to be set to an even number. The settings before and after publishing stream can be effective
 * @property {number} encodeHeight - Encode resolution height, control the image height of the encoder when publishing stream. SDK requires this member to be set to an even number. The settings before and after publishing stream can be effective
 * @property {number} fps - Frame rate, control the frame rate of the camera and the frame rate of the encoder. Only the camera is not started, the setting is effective. Publishing stream set to 60 fps, playing stream to take effect need contact technical support
 * @property {number} bitrate - Bit rate in kbps. The settings before and after publishing stream can be effective
 * @property {ZegoVideoCodecID} codecID - The codec id to be used, the default value is [default]. Settings only take effect before publishing stream
 * @property {number} keyFrameInterval - Video keyframe interval, in seconds. Required: No. Default value: 2 seconds. Value range: [2, 5]. Caution: The setting is only valid before pushing.
 */

/**
 * @typedef {Object} ZegoSEIConfig - SEI configuration
 * @property {ZegoSEIType} type - SEI type
 */

/**
 * @typedef {Object} ZegoVoiceChangerParam - Voice changer parameter.
 * @property {number} pitch - Pitch parameter, value range [-12.0, 12.0], the larger the value, the sharper the sound, set it to 0.0 to turn off. Note the tone-shifting sound effect is only effective for the sound played by the media player, and does not change the tone collected by the microphone. Note that on v2.18.0 and older version, the value range is [-8.0, 8.0].
 */

/**
 * @typedef {Object} ZegoReverbParam - Audio reverberation parameters.
 * @property {number} roomSize - Room size, in the range [0.0, 1.0], to control the size of the "room" in which the reverb is generated, the larger the room, the stronger the reverb.
 * @property {number} reverberance - Echo, in the range [0.0, 0.5], to control the trailing length of the reverb.
 * @property {number} damping - Reverb Damping, range [0.0, 2.0], controls the attenuation of the reverb, the higher the damping, the higher the attenuation.
 * @property {number} dryWetRatio - Dry/wet ratio, the range is greater than or equal to 0.0, to control the ratio between reverberation, direct sound and early reflections; dry part is set to 1 by default; the smaller the dry/wet ratio, the larger the wet ratio, the stronger the reverberation effect.
 */

/**
 * @typedef {Object} ZegoReverbAdvancedParam - Audio reverberation advanced parameters.
 * @property {number} roomSize - Room size(%), in the range [0.0, 1.0], to control the size of the "room" in which the reverb is generated, the larger the room, the stronger the reverb.
 * @property {number} reverberance - Echo(%), in the range [0.0, 100.0], to control the trailing length of the reverb.
 * @property {number} damping - Reverb Damping(%), range [0.0, 100.0], controls the attenuation of the reverb, the higher the damping, the higher the attenuation.
 * @property {boolean} wetOnly - only wet
 * @property {number} wetGain - wet gain(dB), range [-20.0, 10.0]
 * @property {number} dryGain - dry gain(dB), range [-20.0, 10.0]
 * @property {number} toneLow - Tone Low. 100% by default
 * @property {number} toneHigh - Tone High. 100% by default
 * @property {number} preDelay - PreDelay(ms), range [0.0, 200.0]
 * @property {number} stereoWidth - Stereo Width(%). 0% by default
 */

/**
 * @typedef {Object} ZegoReverbEchoParam - Audio reverberation echo parameters.
 * @property {number} inGain - Gain of input audio signal, in the range [0.0, 1.0]
 * @property {number} outGain - Gain of output audio signal, in the range [0.0, 1.0]
 * @property {number} numDelays - Number of echos, in the range [0, 7]
 * @property {number[]} delay - Respective delay of echo signal, in milliseconds, in the range [0, 5000] ms
 * @property {number[]} decay - Respective decay coefficient of echo signal, in the range [0.0, 1.0]
 */

/**
 * @typedef {Object} ZegoUser - User object.
 * @property {string} userID - User ID, a string with a maximum length of 64 bytes or less.Please do not fill in sensitive user information in this field, including but not limited to mobile phone number, ID number, passport number, real name, etc. Only support numbers, English characters and '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '-', '`', ';', '’', ',', '.', '<', '>', '/', '\'.
 * @property {string} userName - User Name, a string with a maximum length of 256 bytes or less.Please do not fill in sensitive user information in this field, including but not limited to mobile phone number, ID number, passport number, real name, etc.
 */

/**
 * @typedef {Object} ZegoStream - Stream object.
 * @property {ZegoUser} user - User object instance.Please do not fill in sensitive user information in this field, including but not limited to mobile phone number, ID number, passport number, real name, etc.
 * @property {string} streamID - Stream ID, a string of up to 256 characters. You cannot include URL keywords, otherwise publishing stream and playing stream will fails. Only support numbers, English characters and '~', '!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '-', '`', ';', '’', ',', '.', '<', '>', '/', '\'.
 * @property {string} extraInfo - Stream extra info
 */

/**
 * @typedef {Object} ZegoRoomExtraInfo - Room extra information.
 * @property {string} key - The key of the room extra information.
 * @property {string} value - The value of the room extra information.
 * @property {ZegoUser} updateUser - The user who update the room extra information.Please do not fill in sensitive user information in this field, including but not limited to mobile phone number, ID number, passport number, real name, etc.
 * @property {number} updateTime - Update time of the room extra information, UNIX timestamp, in milliseconds.
 */

/**
 * @typedef {Object} ZegoRect - View related coordinates.
 * @property {number} x - The horizontal offset from the top-left corner
 * @property {number} y - The vertical offset from the top-left corner
 * @property {number} width - The width of the rectangle
 * @property {number} height - The height of the rectangle
 */

/**
 * @typedef {Object} ZegoRoiRect - Coordinates used by the ROI function.
 * @property {number} x - The horizontal offset from the top-left corner
 * @property {number} y - The vertical offset from the top-left corner
 * @property {number} width - The width of the rectangle
 * @property {number} height - The height of the rectangle
 * @property {number} strength - ROI strength, currently supported value range is [0, 4], 0 is no effect, 4 is the strongest.
 */

/**
 * @typedef {Object} ZegoView - View object.
 * @property {ZegoViewMode} viewMode - View mode, default is ZegoViewModeAspectFit
 * @property {number} backgroundColor - Background color, the format is 0xRRGGBB, default is black, which is 0x000000
 * @property {canvas} canvas - html canvas element
 * @property {boolean} preserveDrawingBuffer - webgl context preserve drawing buffer
 */

/**
 * @typedef {Object} ZegoPublisherConfig - Advanced publisher configuration.
 * @property {string} roomID - The Room ID, It is not necessary to pass in single room mode, but the ID of the corresponding room must be passed in multi-room mode
 */

/**
 * @typedef {Object} ZegoPublishStreamQuality - Published stream quality information.
 * @property {number} videoCaptureFPS - Video capture frame rate. The unit of frame rate is f/s
 * @property {number} videoEncodeFPS - Video encoding frame rate. The unit of frame rate is f/s
 * @property {number} videoSendFPS - Video transmission frame rate. The unit of frame rate is f/s
 * @property {number} videoKBPS - Video bit rate in kbps
 * @property {number} audioCaptureFPS - Audio capture frame rate. The unit of frame rate is f/s
 * @property {number} audioSendFPS - Audio transmission frame rate. The unit of frame rate is f/s
 * @property {number} audioKBPS - Audio bit rate in kbps
 * @property {number} rtt - Local to server delay, in milliseconds
 * @property {number} packetLostRate - Packet loss rate, in percentage, 0.0 ~ 1.0
 * @property {ZegoStreamQualityLevel} level - Published stream quality level
 * @property {boolean} isHardwareEncode - Whether to enable hardware encoding
 * @property {ZegoVideoCodecID} videoCodecID - Video codec ID (Available since 1.17.0)
 * @property {number} totalSendBytes - Total number of bytes sent, including audio, video, SEI
 * @property {number} audioSendBytes - Number of audio bytes sent
 * @property {number} videoSendBytes - Number of video bytes sent
 */

/**
 * @typedef {Object} ZegoCDNConfig - CDN config object.
 * @property {string} url - CDN URL
 * @property {string} authParam - Auth param of URL
 */

/**
 * @typedef {Object} ZegoStreamRelayCDNInfo - Relay to CDN info.
 * @property {string} url - URL of publishing stream to CDN
 * @property {ZegoStreamRelayCDNState} state - State of relaying to CDN
 * @property {ZegoStreamRelayCDNUpdateReason} updateReason - Reason for relay state changed
 * @property {number} stateTime - The timestamp when the state changed, UNIX timestamp, in milliseconds.
 */

/**
 * @typedef {Object} ZegoPlayerConfig - Advanced player configuration.
 * @property {ZegoStreamResourceMode} resourceMode - Stream resource mode.
 * @property {?ZegoCDNConfig} cdnConfig - The CDN configuration for playing stream. If set, the stream is play according to the URL instead of the streamID. After that, the streamID is only used as the ID of SDK internal callback.
 * @property {ZegoPlayerVideoLayer} videoLayer - Set the video layer for playing the stream.
 * @property {string} roomID - The Room ID.
 * @property {ZegoVideoCodecID} videoCodecID - The video encoding type of the stream.
 * @property {ZegoResourceType} sourceResourceType - The resource type of the source stream.
 */

/**
 * @typedef {Object} ZegoPlayStreamQuality - Played stream quality information.
 * @property {number} videoRecvFPS - Video receiving frame rate. The unit of frame rate is f/s
 * @property {number} videoDejitterFPS - Video dejitter frame rate. The unit of frame rate is f/s (Available since 1.17.0)
 * @property {number} videoDecodeFPS - Video decoding frame rate. The unit of frame rate is f/s
 * @property {number} videoRenderFPS - Video rendering frame rate. The unit of frame rate is f/s
 * @property {number} videoKBPS - Video bit rate in kbps
 * @property {number} videoBreakRate - Video break rate, the unit is (number of breaks / every 10 seconds) (Available since 1.17.0)
 * @property {number} audioRecvFPS - Audio receiving frame rate. The unit of frame rate is f/s
 * @property {number} audioDejitterFPS - Audio dejitter frame rate. The unit of frame rate is f/s (Available since 1.17.0)
 * @property {number} audioDecodeFPS - Audio decoding frame rate. The unit of frame rate is f/s
 * @property {number} audioRenderFPS - Audio rendering frame rate. The unit of frame rate is f/s
 * @property {number} audioKBPS - Audio bit rate in kbps
 * @property {number} audioBreakRate - Audio break rate, the unit is (number of breaks / every 10 seconds) (Available since 1.17.0)
 * @property {number} mos - The audio quality of the playing stream determined by the audio MOS (Mean Opinion Score) measurement method, value range [-1, 5], where -1 means unknown, [0, 5] means valid score, the higher the score, the better the audio quality. For the subjective perception corresponding to the MOS value, please refer to https://docs.zegocloud.com/article/3720#4_4 (Available since 2.16.0)
 * @property {number} rtt - Server to local delay, in milliseconds
 * @property {number} packetLostRate - Packet loss rate, in percentage, 0.0 ~ 1.0
 * @property {number} peerToPeerDelay - Delay from peer to peer, in milliseconds
 * @property {number} peerToPeerPacketLostRate - Packet loss rate from peer to peer, in percentage, 0.0 ~ 1.0
 * @property {ZegoStreamQualityLevel} level - Published stream quality level
 * @property {number} delay - Delay after the data is received by the local end, in milliseconds
 * @property {number} avTimestampDiff - The difference between the video timestamp and the audio timestamp, used to reflect the synchronization of audio and video, in milliseconds. This value is less than 0 means the number of milliseconds that the video leads the audio, greater than 0 means the number of milliseconds that the video lags the audio, and 0 means no difference. When the absolute value is less than 200, it can basically be regarded as synchronized audio and video, when the absolute value is greater than 200 for 10 consecutive seconds, it can be regarded as abnormal (Available since 1.19.0)
 * @property {boolean} isHardwareDecode - Whether to enable hardware decoding
 * @property {ZegoVideoCodecID} videoCodecID - Video codec ID (Available since 1.17.0)
 * @property {number} totalRecvBytes - Total number of bytes received, including audio, video, SEI
 * @property {number} audioRecvBytes - Number of audio bytes received
 * @property {number} videoRecvBytes - Number of video bytes received
 * @property {number} audioCumulativeBreakCount - Accumulated audio break count (Available since 2.9.0)
 * @property {number} audioCumulativeBreakTime - Accumulated audio break time, in milliseconds (Available since 2.9.0)
 * @property {number} audioCumulativeBreakRate - Accumulated audio break rate, in percentage, 0.0 ~ 1.0 (Available since 2.9.0)
 * @property {number} audioCumulativeDecodeTime - Accumulated audio decode time, in milliseconds (Available since 2.9.0)
 * @property {number} videoCumulativeBreakCount - Accumulated video break count (Available since 2.9.0)
 * @property {number} videoCumulativeBreakTime - Accumulated video break time, in milliseconds (Available since 2.9.0)
 * @property {number} videoCumulativeBreakRate - Accumulated video break rate, in percentage, 0.0 ~ 1.0 (Available since 2.9.0)
 * @property {number} videoCumulativeDecodeTime - Accumulated video decode time, in milliseconds (Available since 2.9.0)
 */

/**
 * @typedef {Object} ZegoDeviceInfo - Device Info.
 * @property {string} deviceID - Device ID
 * @property {string} deviceName - Device name
 */

/**
 * @typedef {Object} ZegoPerformanceStatus - System performance monitoring status
 * @property {number} cpuUsageApp - Current CPU usage of the app, value range [0, 1]
 * @property {number} cpuUsageSystem - Current CPU usage of the system, value range [0, 1]
 * @property {number} memoryUsageApp - Current memory usage of the app, value range [0, 1]
 * @property {number} memoryUsageSystem - Current memory usage of the system, value range [0, 1]
 * @property {number} memoryUsedApp - Current memory used of the app, in MB
 */

/**
 * @typedef {Object} ZegoMixerAudioConfig - Mix stream audio configuration.
 * @property {number} bitrate - Audio bitrate in kbps, default is 48 kbps, cannot be modified after starting a mixer task
 * @property {ZegoAudioChannel} channel - Audio channel, default is Mono
 * @property {ZegoAudioCodecID} codecID - codec ID, default is ZegoAudioCodecIDDefault
 */

/**
 * @typedef {Object} ZegoMixerVideoConfig - Mix stream video config object.
 * @property {number} width - Video resolution width
 * @property {number} height - Video resolution height
 * @property {number} fps - Video FPS, cannot be modified after starting a mixer task
 * @property {number} bitrate - Video bitrate in kbps
 */

/**
 * @typedef {Object} ZegoFontStyle - Font style.
 * @property {ZegoFontType} type - Font type. Required: False. Default value: Source han sans [ZegoFontTypeSourceHanSans]
 * @property {number} size - Font size in px. Required: False. Default value: 24. Value range: [12,100].
 * @property {number} color - Font color, the calculation formula is: R + G x 256 + B x 65536, the value range of R (red), G (green), and B (blue) [0,255]. Required: False. Default value: 16777215(white). Value range: [0,16777215].
 * @property {number} transparency - Font transparency. Required: False. Default value: 0. Value range: [0,100], 100 is completely opaque, 0 is completely transparent.
 * @property {boolean} border - Whether the font has a border. Required: False. Default value: False. Value range: True/False.
 * @property {number} borderColor - Font border color, the calculation formula is: R + G x 256 + B x 65536, the value range of R (red), G (green), and B (blue) [0,255]. Required: False. Default value: 0. Value range: [0,16777215].
 */

/**
 * @typedef {Object} ZegoLabelInfo - Label info.
 * @property {string} text - Text content, support for setting simplified Chinese, English, half-width, not full-width. Required: True.Value range: Maximum support for displaying 100 Chinese characters and 300 English characters.
 * @property {number} left - The distance between the font and the left border of the output canvas, in px. Required: False. Default value: 0.
 * @property {number} top - The distance between the font and the top border of the output canvas, in px. Required: False. Default value: 0.
 * @property {ZegoFontStyle} font - Font style. Required: False.
 */

/**
 * @typedef {Object} ZegoMixerInput - Mixer input.
 * @property {string} streamID - Stream ID, a string of up to 256 characters. You cannot include URL keywords, otherwise publishing stream and playing stream will fails. Only support numbers, English characters and '~', '!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '-', '`', ';', '’', ',', '.', '<', '>', '/', '\'.
 * @property {ZegoMixerInputContentType} contentType - Mix stream content type
 * @property {ZegoRect} layout - Stream layout. When the mixed stream is an audio stream (that is, the ContentType parameter is set to the audio mixed stream type), the layout field is not processed inside the SDK, and there is no need to pay attention to this parameter.
 * @property {number} soundLevelID - If enable soundLevel in mix stream task, an unique soundLevelID is need for every stream
 * @property {number} volume - Input stream volume, valid range [0, 200], default is 100
 * @property {boolean} isAudioFocus - Whether the focus voice is enabled in the current input stream, the sound of this stream will be highlighted if enabled
 * @property {number} audioDirection - The direction of the audio. Valid direction is between 0 to 360. Set -1 means disable. Default value is -1
 * @property {ZegoLabelInfo} label - Text watermark.
 * @property {ZegoMixRenderMode} renderMode - Video view render mode.
 */

/**
 * @typedef {Object} ZegoMixerOutput - Mixer output object.
 * @property {string} target - Mix stream output target, URL or stream ID, if set to be URL format, only RTMP URL surpported, for example rtmp://xxxxxxxx, addresses with two identical mixed-stream outputs cannot be passed in.
 * @property {ZegoMixerOutputVideoConfig} videoConfig - Mix stream output video config
 */

/**
 * @typedef {Object} ZegoWatermark - Watermark object.
 * @property {string} imageURL - The path of the watermark image. Support local file absolute path (file://xxx). The format supports png, jpg.
 * @property {ZegoRect} layout - Watermark image layout
 */

/**
 * @typedef {Object} ZegoMixerTask - Mix stream task object.
 * @property {string} taskID - The task ID of the task
 * @property {ZegoMixerInput[]} inputList - The input list of the task
 * @property {ZegoMixerOutput[]} outputList - The output list of the task
 * @property {ZegoMixerVideoConfig} videoConfig - The audio config of the task
 * @property {ZegoMixerAudioConfig} audioConfig - The audio config of the task
 * @property {?ZegoWatermark} watermark - The watermark of the task
 * @property {string} backgroundImageURL - The background image URL of the task
 * @property {boolean} enableSoundLevel - Enable or disable sound level callback for the task. If enabled, then the remote player can get the soundLevel of every stream in the inputlist by [onMixerSoundLevelUpdate] callback.
 * @property {?map<string, string>} advancedConfig - Set advanced configuration, such as specifying video encoding and others. If you need to use it, contact ZEGO technical support.
 */

/**
 * @typedef {Object} ZegoSoundLevelConfig - Configuration for start sound level monitor.
 * @property {number} millisecond - Monitoring time period of the sound level, in milliseconds, has a value range of [100, 3000]. Default is 100 ms.
 * @property {boolean} enableVAD - Set whether the sound level callback includes the VAD detection result.
 */

/**
 * @typedef {Object} ZegoSoundLevelInfo - Sound level info object.
 * @property {string} streamID - Stream ID.
 * @property {number} soundLevel - Sound level value.
 * @property {number} vad - Whether the stream corresponding to StreamID contains voice, 0 means noise, 1 means normal voice. This value is valid only when the [enableVAD] parameter in the [ZegoSoundLevelConfig] configuration is set to true when calling [startSoundLevelMonitorWithConfig].
 */

/**
 * @typedef {Object} ZegoAutoMixerTask - Auto mix stream task object.
 * @property {string} taskID - The taskID of the auto mixer task.Description: Auto stream mixing task id, must be unique in a room.Use cases: User need to set this parameter when initiating an auto stream mixing task.Required: Yes.Recommended value: Set this parameter based on requirements.Value range: A string up to 256 bytes.Caution: When starting a new auto stream mixing task, only one auto stream mixing task ID can exist in a room, that is, to ensure the uniqueness of task ID. You are advised to associate task ID with room ID. You can directly use the room ID as the task ID.Cannot include URL keywords, for example, 'http' and '?' etc, otherwise publishing stream and playing stream will fail. Only support numbers, English characters and '~', '!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '-', '`', ';', '’', ',', '.', '<', '>', '/', '\'.
 * @property {string} roomID - The roomID of the auto mixer task.Description: Auto stream mixing task id.Use cases: User need to set this parameter when initiating an auto stream mixing task.Required: Yes.Recommended value: Set this parameter based on requirements.Value range: A string up to 128 bytes.Caution: Only support numbers, English characters and '~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '-', '`', ';', '’', ',', '.', '<', '>', '/', '\'.
 * @property {ZegoMixerAudioConfig} audioConfig - The audio config of the auto mixer task.Description: The audio config of the auto mixer task.Use cases: If user needs special requirements for the audio config of the auto stream mixing task, such as adjusting the audio bitrate, user can set this parameter as required. Otherwise, user do not need to set this parameter.Required: No.Default value: The default audio bitrate is `48 kbps`, the default audio channel is `ZEGO_AUDIO_CHANNEL_MONO`, the default encoding ID is `ZEGO_AUDIO_CODEC_ID_DEFAULT`, and the default multi-channel audio stream mixing mode is `ZEGO_AUDIO_MIX_MODE_RAW`.Recommended value: Set this parameter based on requirements.
 * @property {ZegoMixerOutput[]} outputList - The output list of the auto mixer task.Description: The output list of the auto stream mixing task, items in the list are URL or stream ID, if the item set to be URL format, only RTMP URL surpported, for example rtmp://xxxxxxxx.Use cases: User need to set this parameter to specify the mix stream output target when starting an auto stream mixing task.Required: Yes.
 * @property {boolean} enableSoundLevel - Enable or disable sound level callback for the task. If enabled, then the remote player can get the sound level of every stream in the inputlist by [onAutoMixerSoundLevelUpdate] callback.Description: Enable or disable sound level callback for the task.If enabled, then the remote player can get the sound level of every stream in the inputlist by [onAutoMixerSoundLevelUpdate] callback.Use cases: This parameter needs to be configured if user need the sound level information of every stream when an auto stream mixing task started.Required: No.Default value: `false`.Recommended value: Set this parameter based on requirements.
 */

/**
 * @typedef {Object} ZegoBroadcastMessageInfo - Broadcast message info.
 * @property {string} message - message content
 * @property {number} messageID - message id
 * @property {number} sendTime - Message send time, UNIX timestamp, in milliseconds.
 * @property {ZegoUser} fromUser - Message sender.Please do not fill in sensitive user information in this field, including but not limited to mobile phone number, ID number, passport number, real name, etc.
 */

/**
 * @typedef {Object} ZegoBarrageMessageInfo - Barrage message info.
 * @property {string} message - message content
 * @property {string} messageID - message id
 * @property {number} sendTime - Message send time, UNIX timestamp, in milliseconds.
 * @property {ZegoUser} fromUser - Message sender.Please do not fill in sensitive user information in this field, including but not limited to mobile phone number, ID number, passport number, real name, etc.
 */

/**
 * @typedef {Object} ZegoAudioFrameParam - Parameter object for audio frame.
 * @property {ZegoAudioSampleRate} sampleRate - Sampling Rate
 * @property {ZegoAudioChannel} channel - Audio channel, default is Mono
 */

/**
 * @typedef {Object} ZegoAudioConfig - Audio configuration.
 * @property {number} bitrate - Audio bitrate in kbps, default is 48 kbps. The settings before and after publishing stream can be effective
 * @property {ZegoAudioChannel} channel - Audio channel, default is Mono. The setting only take effect before publishing stream
 * @property {ZegoAudioCodecID} codecID - codec ID, default is ZegoAudioCodecIDDefault. The setting only take effect before publishing stream
 */

/**
 * @typedef {Object} ZegoCustomAudioProcessConfig - Customize the audio processing configuration object.
 * @property {ZegoAudioSampleRate} sampleRate - Sampling rate, the sampling rate of the input data expected by the audio pre-processing module in App. If 0, the default is the SDK internal sampling rate.
 * @property {ZegoAudioChannel} channel - Number of sound channels, the expected number of sound channels for input data of the audio pre-processing module in App. If 0, the default is the number of internal channels in the SDK
 * @property {number} samples - The number of samples required to encode a frame; When encode = false, if samples = 0, the SDK will use the internal sample number, and the SDK will pass the audio data to the external pre-processing module. If the samples! = 0 (the effective value of samples is between [160, 2048]), and the SDK will send audio data to the external preprocessing module that sets the length of sample number. Encode = true, the number of samples for a frame of AAC encoding can be set as (480/512/1024/1960/2048)
 */

/**
 * @typedef {Object} ZegoDataRecordConfig - Record config.
 * @property {string} filePath - The path to save the recording file, absolute path, need to include the file name, the file name need to specify the suffix, currently supports .mp4/.flv/.aac format files, if multiple recording for the same path, will overwrite the file with the same name. The maximum length should be less than 1024 bytes.
 * @property {ZegoDataRecordType} recordType - Type of recording media
 */

/**
 * @typedef {Object} ZegoDataRecordProgress - File recording progress.
 * @property {number} duration - Current recording duration in milliseconds
 * @property {number} currentFileSize - Current recording file size in byte
 */

/**
 * @typedef {Object} ZegoNetworkSpeedTestConfig - Network speed test config
 * @property {boolean} testUplink - Test uplink or not
 * @property {number} expectedUplinkBitrate - The unit is kbps. Recommended to use the bitrate in ZegoVideoConfig when call startPublishingStream to determine whether the network uplink environment is suitable.
 * @property {boolean} testDownlink - Test downlink or not
 * @property {number} expectedDownlinkBitrate - The unit is kbps. Recommended to use the bitrate in ZegoVideoConfig when call startPublishingStream to determine whether the network downlink environment is suitable.
 */

/**
 * @typedef {Object} ZegoNetworkSpeedTestQuality - network speed test quality
 * @property {number} connectCost - Time to connect to the server, in milliseconds. During the speed test, if the network connection is disconnected, it will automatically initiate a reconnection, and this variable will be updated accordingly.
 * @property {number} rtt - rtt, in milliseconds
 * @property {number} packetLostRate - packet lost rate. in percentage, 0.0 ~ 1.0
 * @property {ZegoStreamQualityLevel} quality - network quality. excellent, good, medium and poor
 */

/**
 * @typedef {Object} ZegoAudioEffectPlayConfig - AudioEffectPlayer play configuration.
 * @property {number} playCount - The number of play counts. When set to 0, it will play in an infinite loop until the user invoke [stop]. The default is 1, which means it will play only once.
 * @property {boolean} isPublishOut - Whether to mix audio effects into the publishing stream, the default is false.
 */

module.exports = {
    ZegoScenario,
    ZegoLanguage,
    ZegoRoomMode,
    ZegoEngineState,
    ZegoRoomState,
    ZegoPublishChannel,
    ZegoViewMode,
    ZegoVideoMirrorMode,
    ZegoSEIType,
    ZegoPublisherState,
    ZegoVoiceChangerPreset,
    ZegoReverbPreset,
    ZegoVideoConfigPreset,
    ZegoStreamQualityLevel,
    ZegoAudioChannel,
    ZegoCustomAudioProcessConfigureType,
    ZegoAudioCaptureStereoMode,
    ZegoAudioCodecID,
    ZegoVideoCodecID,
    ZegoPlayerVideoLayer,
    ZegoVideoStreamType,
    ZegoAECMode,
    ZegoANSMode,
    ZegoEncodeProfile,
    ZegoTrafficControlProperty,
    ZegoTrafficControlMinVideoBitrateMode,
    ZegoTrafficControlFocusOnMode,
    ZegoPlayerState,
    ZegoPlayerMediaEvent,
    ZegoStreamResourceMode,
    ZegoUpdateType,
    ZegoStreamRelayCDNState,
    ZegoStreamRelayCDNUpdateReason,
    ZegoDeviceType,
    ZegoDeviceExceptionType,
    ZegoRemoteDeviceState,
    ZegoAudioDeviceType,
    ZegoAudioRoute,
    ZegoMixerInputContentType,
    ZegoCapturePipelineScaleMode,
    ZegoVideoFrameFormat,
    ZegoVideoBufferType,
    ZegoVideoFrameFormatSeries,
    ZegoVideoFlipMode,
    ZegoAudioConfigPreset,
    ZegoMediaPlayerState,
    ZegoMediaPlayerNetworkEvent,
    ZegoMediaPlayerAudioChannel,
    ZegoAudioEffectPlayState,
    ZegoAudioSampleRate,
    ZegoDataRecordType,
    ZegoDataRecordState,
    ZegoNetworkMode,
    ZegoNetworkSpeedTestType,
    ZegoFontType,
    ZegoMixRenderMode,
    ZegoCameraFocusMode,
    ZegoCameraExposureMode,
    ZegoAudioVADType,
    ZegoAudioVADStableStateMonitorType
}

